{"version":3,"sources":["components/ClockContainer/ClockContainer.module.scss","components/ClockSetting/index.js","components/ClockSetting/ClockSetting.js","components/ClockActions/index.js","components/ClockActions/ClockActions.js","services/timer/timer.js","services/timer/index.js","services/time/time.js","services/time/index.js","components/ClockContainer/ClockContainer.js","components/ClockContainer/index.js","components/Clock/index.js","components/Clock/Clock.js","pages/Pomodoro/index.js","pages/Pomodoro/Pomodoro.js","serviceWorker.js","index.js","components/Clock/Clock.module.scss","pages/Pomodoro/Pomodoro.module.scss","components/ClockSetting/ClockSetting.module.scss"],"names":["module","exports","ClockSetting","props","className","styles","root","title","icon","faArrowDown","onClick","handleDecrement","setting","faArrowUp","handleIncrement","ClockActions","handlePlayPause","faPlay","faPause","faRedo","handleReset","singleton","interval","isOn","start","callback","delay","setInterval","pause","clearInterval","createTimer","Object","freeze","timer","padZero","number","toString","formatSeconds","seconds","Math","floor","minutes","remaining","createTime","time","ClockState","session","break","ClockContainer","defaultBreakLength","defaultSessionLength","useState","breakLength","setBreakLength","sessionLength","setSessionLength","setTime","power","setPower","status","useRef","settings","b","s","current","t","Audio","play","Clock","off","timeFormat","Pomodoro","box","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.025c3893.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ClockContainer_root__2Ca8F\",\"settings\":\"ClockContainer_settings__3U8DV\"};","import ClockSetting from './ClockSetting';\r\n\r\nexport default ClockSetting;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ClockSetting.module.scss';\r\nimport { faArrowUp, faArrowDown } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst ClockSetting = props => {\r\n\r\n  return (\r\n    <div className={styles.root}>\r\n      <h3>{props.title}</h3>\r\n      <div>\r\n        <FontAwesomeIcon className=\"icon\" icon={faArrowDown} onClick={props.handleDecrement}/>\r\n        &nbsp;<span className={styles.setting}>{props.setting}</span>&nbsp;\r\n        <FontAwesomeIcon icon={faArrowUp} className=\"icon\" onClick={props.handleIncrement}/>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nClockSetting.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  setting: PropTypes.number.isRequired,\r\n  handleIncrement: PropTypes.func.isRequired,\r\n  handleDecrement: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ClockSetting;","import ClockActions from './ClockActions';\r\n\r\nexport default ClockActions;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { faPlay, faPause, faRedo } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst ClockActions = props => {\r\n  return (\r\n    <div>\r\n      <span onClick={props.handlePlayPause}>\r\n        <FontAwesomeIcon icon={faPlay} className=\"icon\"/>\r\n        <FontAwesomeIcon icon={faPause} className=\"icon\"/>\r\n      </span>\r\n      &nbsp;&nbsp;&nbsp;&nbsp;\r\n      <FontAwesomeIcon icon={faRedo} className=\"icon\" onClick={props.handleReset}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nClockActions.propTypes = {\r\n  handlePlayPause: PropTypes.func.isRequired,\r\n  handleReset: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ClockActions;","const createTimer = () => {\r\n  let interval;\r\n  let isOn = false;\r\n\r\n  return {\r\n    start: (callback, delay = 1000) => {\r\n      isOn = true;\r\n      interval = setInterval(callback, delay)\r\n    },\r\n    pause: () => {\r\n      isOn = false;\r\n      clearInterval(interval);\r\n    },\r\n    isOn: () => {\r\n      return isOn;\r\n    }\r\n  };\r\n};\r\n\r\n// https://overreacted.io/making-setinterval-declarative-with-react-hooks/\r\n// if I wanted to make this a hook this is a good source\r\n\r\nconst singleton = createTimer();\r\nObject.freeze(singleton);\r\n\r\nexport default singleton;","import timer from './timer';\r\n\r\nexport default timer;","const createTime = () => {\r\n  /**\r\n   * Format seconds into the format mm:ss\r\n   * @param {number} seconds Millisonds to format\r\n   * @returns {string} String formatted to mm:ss\r\n   */\r\n  const formatSeconds = (seconds) => {\r\n    if(typeof seconds !== 'number' || seconds <= 0) return '00:00'\r\n    seconds = Math.floor(seconds); // get rid of any decimals\r\n    const minutes = Math.floor(seconds/60);\r\n    const remaining = seconds % 60;\r\n    return `${padZero(minutes)}:${padZero(remaining)}`;\r\n  }\r\n\r\n  /**\r\n   * Nap to pad a zero to the front of so it is 2 characters long.\r\n   * @param {number} number Number to pad\r\n   * @returns {string} String of the two character long\r\n   */\r\n  function padZero(number) {\r\n    // same number, only one digit\r\n    if(number % 10 === number) {\r\n      return '0' + number;\r\n    } else {\r\n      return number.toString();\r\n    }\r\n  }\r\n\r\n  return {\r\n    formatSeconds\r\n  };\r\n};\r\n\r\nconst singleton = createTime();\r\nObject.freeze(singleton);\r\n\r\nexport default singleton;","import time from './time';\r\n\r\nexport default time;","import React, { useState, useRef } from 'react';\r\nimport styles from './ClockContainer.module.scss';\r\nimport { Clock, ClockActions, ClockSetting } from '../index';\r\nimport { timer } from '../../services';\r\n\r\nexport const ClockState = {\r\n  session: 1,\r\n  break: 2,\r\n};\r\n\r\nconst ClockContainer = props => {\r\n\r\n  const defaultBreakLength = 5;\r\n  const defaultSessionLength = 20;\r\n\r\n  const [breakLength, setBreakLength] = useState(defaultBreakLength);\r\n  const [sessionLength, setSessionLength] = useState(defaultSessionLength);\r\n  const [time, setTime] = useState(defaultSessionLength * 60); // time displayed on the clock\r\n  const [power, setPower] = useState(false);\r\n  \r\n  // when passing state to functions the lastest isnt always available because of javascript closures\r\n  // which is why I used a ref for this one, the state is accessible through the current property\r\n  const status = useRef(ClockState.session); \r\n\r\n  function handleBreakIncrement() {\r\n    if(!timer.isOn() && breakLength < 60) {\r\n      setBreakLength(b => b + 1)\r\n    }\r\n  }\r\n\r\n  function handleBreakDecrement() {\r\n    if(!timer.isOn() && breakLength > 1) {\r\n      setBreakLength(b => b !== 0 ? b - 1 : 0)\r\n    }\r\n  }\r\n\r\n  function handleSessionIncrement() {\r\n    if(!timer.isOn() && sessionLength < 60) {\r\n      setSessionLength(s => s + 1);\r\n      setTime((sessionLength + 1) * 60)\r\n    } \r\n  }\r\n\r\n  function handleSessionDecrement() {\r\n    if(!timer.isOn() && sessionLength > 1) {\r\n      setSessionLength(s => s - 1)\r\n      setTime((sessionLength - 1) * 60)\r\n    } \r\n  }\r\n\r\n  function handleReset() {\r\n    timer.pause();\r\n    setPower(false);\r\n    status.current = ClockState.session;\r\n    setSessionLength(defaultSessionLength);\r\n    setBreakLength(defaultBreakLength);\r\n    setTime(defaultSessionLength * 60);\r\n  }\r\n\r\n  function handlePlayPause() {\r\n    if(!timer.isOn()) {\r\n      setPower(true);\r\n      timer.start(() => setTime(t => {\r\n        // if its not 0 decrement like normal\r\n        if(t !== 0 ) {\r\n          return t - 1;\r\n        } else if (status.current === ClockState.session) {\r\n          // at this point we know its 0, so determine were status is was in the change it accordingly\r\n          new Audio('./sounds/success.mp3').play();\r\n          status.current = ClockState.break;\r\n          return breakLength * 60;\r\n        } else {\r\n          new Audio('./sounds/doubleBeep.mp3').play();\r\n          status.current = ClockState.session;\r\n          return sessionLength * 60;\r\n        }\r\n      }));\r\n    } \r\n    else { //pause, so turn off and pause timer\r\n      setPower(false);\r\n      timer.pause();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={styles.root}>\r\n      <div className={styles.settings}>\r\n        <ClockSetting \r\n          title=\"break length\" \r\n          setting={breakLength} \r\n          handleDecrement={handleBreakDecrement}\r\n          handleIncrement={handleBreakIncrement}\r\n        />\r\n        <ClockSetting \r\n          title=\"session length\"\r\n          setting={sessionLength} \r\n          handleDecrement={handleSessionDecrement}\r\n          handleIncrement={handleSessionIncrement}\r\n        />\r\n      </div>\r\n      <Clock time={time} status={status.current} power={power}/>\r\n      <ClockActions handleReset={handleReset} handlePlayPause={handlePlayPause}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ClockContainer;","import ClockContainer, { ClockState } from './ClockContainer';\r\n\r\nexport default ClockContainer;\r\nexport { ClockState };","import Clock from './Clock';\r\n\r\nexport default Clock;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Clock.module.scss';\r\nimport {time as timeFormat} from '../../services';\r\nimport { ClockState } from '../ClockContainer';\r\n\r\nconst Clock = ({time, status, power}) => {\r\n  \r\n  return (\r\n    <div className={`${styles.root} ${!power ? styles.off : status === ClockState.session ? styles.session : styles.break }`}>\r\n      {\r\n        status === ClockState.session \r\n        ? <h2>Session</h2>\r\n        : <h2>Break</h2>\r\n      }\r\n      \r\n      <p className={styles.time}>{timeFormat.formatSeconds(time)}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nClock.propTypes = {\r\n  time: PropTypes.number.isRequired,\r\n  status: PropTypes.number.isRequired,\r\n  power: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default Clock;","import Pomodoro from './Pomodoro';\r\n\r\nexport default Pomodoro;","import React from 'react';\r\nimport styles from './Pomodoro.module.scss';\r\nimport { ClockContainer } from '../../components/index';\r\n\r\nconst Pomodoro = props => {\r\n  return (\r\n    <div className={styles.root}>\r\n      <section className={styles.box}>\r\n        <header>\r\n          <h1>Pomodoro Clock</h1>\r\n        </header>\r\n          <ClockContainer />\r\n        <footer>\r\n          <p>\r\n            Designed and Coded by\r\n            <br/>\r\n            <span>David O'Riley</span>\r\n          </p>\r\n        </footer>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pomodoro;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.scss';\r\nimport { Pomodoro } from './pages/index';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Pomodoro />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Clock_root__1Gj_5\",\"off\":\"Clock_off__3_mZE\",\"session\":\"Clock_session__245R2\",\"break\":\"Clock_break__VouQh\",\"time\":\"Clock_time__1Xi7P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Pomodoro_root__2mg8n\",\"box\":\"Pomodoro_box__2N20B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"ClockSetting_root__fnCIR\",\"setting\":\"ClockSetting_setting__3xhF2\"};"],"sourceRoot":""}